<!-- livebook:{"persist_outputs":true} -->

# AOC 2023 - Day 03 - Gear Ratios

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"}
])
```

## Setup

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"3","session_secret":"AOC_COOKIE_2023","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "3", System.fetch_env!("LB_AOC_COOKIE_2023"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 ".679.....662....71............................805..........862.680...................................................................687....\n............*....-..811..........846..855......*.............*..$........230.92@............................=.....................92........\n..........360..........#....664.....=.*...881...677...934.780.......426.*..........8......654.....*959.....539..........21.........*........\n.....................+.........*......379..*.........*.........=.........969........*........*.976..............872....*....../....579......\n.......566......652...809....482.394......492..303.650..../...38....%...............106...385..................#.....793..484.865...........\n......*...........*................*..347.......*.........220.....349...691...392*..................18..797.......................+.........\n.....11......890........870.......156............733.................../..........921.....................*......*.............203..........\n.............#...238.....*...........................188......294./58........408...............677.......778....104.903............%........\n.411+...828.......*.....706.....249..=.....638...848*...........%...............*948............*.....+......+...........917.......817...346\n................69.................*..310.*....@..........118*......428=..785...................931...217.....934....475...@.145........*...\n...844.885.........#66...........587.......74...773...........194......../.........&107................................%...............375..\n......*....826.190.......498........................960............24........212............................398...........474*925...........\n...........*...*......../......949.-...213./353.................................@...........853......33*164....+....998...............325...\n........640..823....957........&...746..*........*777.............134.......264.......904+..=........................*......./........%.....\n....43...............*....457............325..390...........618.........265....*670............=...#165........909..634.......810...........\n.....................503.*.....438..904*.............+.........*..563..*............345@......597.........758.*...................*154......\n...941...................612...@........691.....&...336.......837..*....489...............................*...462.689....995...106..........\n......*383..824...................911........*..467.................44....../.........&445...$...765.647..464.............&..........226....\n......................151.....116*........249..................929*.......500..140.........18.......*.........823.....454............*......\n..................968..@..........................118*.....300.................*....762.........541......59...*....35....*..........8.......\n.....304.........*.......620..@...573.878................................@...@.273.*......572...............661........527.971*.......259...\n....*.............83.....%...983.*......*.32..603.....201..............492.166.....339.....*...978$..............373...........340.....*....\n.761..758...934..................550.148.................................................25......................*.....*236.............624.\n........&......*...393..62*.................167/..716........$........910.767.......380............873*812.362.115..537......48.............\n.....#........697..*.......159.....................*.........522..............41.....*.........+............*...........812......13.........\n....529.............374......../...%.............................143...........*......109.......365..........952...........*....*...........\n...........122*...............555.937......674....................../...529.774..371.................#.38.........../.......304.750....715..\n..................873*....819..........165....*..928*345........................*..........77......478..*...440...743...................*...\n964...........417.....802..*......230..-....509..................573...........219...675....-.865.......13............25.62*4...980..145....\n....*55" <> ...}
```

## Part 1

You and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.

It doesn't take long to find the gondolas, but there seems to be a problem: they're not moving.

"Aaah!"

You turn around to see a slightly-greasy Elf with a wrench and a look of surprise. "Sorry, I wasn't expecting anyone! The gondola lift isn't working right now; it'll still be a while before I can fix it." You offer to help.

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

```elixir
puzzle_example = """
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
"""
```

<!-- livebook:{"output":true} -->

```
"467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\n"
```

In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?

```elixir
defmodule Symbol do
  defstruct [:value, :row, :column]

  def valid_symbol?(%__MODULE__{value: "."}), do: false
  def valid_symbol?(%__MODULE__{value: <<val>>}) when val in ?0..?9, do: false
  def valid_symbol?(%__MODULE__{}), do: true

  def gear?(%__MODULE__{value: "*"}), do: true
  def gear?(%__MODULE__{}), do: false
end
```

<!-- livebook:{"output":true} -->

```
{:module, Symbol, <<70, 79, 82, 49, 0, 0, 11, ...>>, {:gear?, 1}}
```

```elixir
defmodule SymbolMatrix do
  defstruct [:items, filtered: false]

  def new!(raw_string) do
    items =
      raw_string
      |> String.split("\n", trim: true)
      |> Enum.with_index()
      |> Enum.map(&split_row/1)
      |> List.flatten()

    %__MODULE__{items: items}
  end

  def filter_symbols(%__MODULE__{items: items}) do
    filtered_items =
      items
      |> Enum.filter(&Symbol.valid_symbol?/1)

    %__MODULE__{items: filtered_items, filtered: true}
  end

  def filter_gears(%__MODULE__{items: items}) do
    filtered_items =
      items
      |> Enum.filter(&Symbol.gear?/1)

    %__MODULE__{items: filtered_items, filtered: true}
  end

  defp split_row({raw_string, row_index}) do
    raw_string
    |> String.graphemes()
    |> Enum.with_index()
    |> Enum.map(fn {x, col_index} -> %Symbol{value: x, row: row_index, column: col_index} end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, SymbolMatrix, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:split_row, 1}}
```

```elixir
defmodule EnginePart, do: defstruct([:value, :row, :start_column, :end_column])
```

<!-- livebook:{"output":true} -->

```
{:module, EnginePart, <<70, 79, 82, 49, 0, 0, 8, ...>>,
 %EnginePart{value: nil, row: nil, start_column: nil, end_column: nil}}
```

```elixir
defmodule EnginePartList do
  defstruct [:items]

  def new!(%SymbolMatrix{items: symbols}) do
    items =
      symbols
      |> Enum.filter(fn %Symbol{value: <<letter>>} -> letter in ?0..?9 end)
      |> Enum.chunk_while([], &chunker/2, &chunk_after/1)
      |> Enum.map(&generate_part/1)

    %__MODULE__{items: items}
  end

  defp chunker(element, []), do: {:cont, [element]}

  defp chunker(%Symbol{row: row} = element, [%Symbol{row: last_row} | _] = acc)
       when row != last_row do
    # We always chunk by new row
    {:cont, Enum.reverse(acc), [element]}
  end

  defp chunker(%Symbol{column: col} = element, [%Symbol{column: last_col} | _] = acc)
       when col - last_col > 1 do
    # We chunk when the the distance between current and last is not 1
    {:cont, Enum.reverse(acc), [element]}
  end

  defp chunker(element, acc) do
    # For everything else we add to the chunk
    {:cont, [element | acc]}
  end

  defp chunk_after([]), do: {:cont, []}
  defp chunk_after(acc), do: {:cont, Enum.reverse(acc), []}

  defp generate_part(symbols) do
    value =
      symbols
      |> Enum.map(fn x -> x.value end)
      |> List.to_string()
      |> String.to_integer()

    first = List.first(symbols)
    last = List.last(symbols)

    %EnginePart{
      value: value,
      row: first.row,
      start_column: first.column,
      end_column: last.column
    }
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, EnginePartList, <<70, 79, 82, 49, 0, 0, 19, ...>>, {:generate_part, 1}}
```

```elixir
defmodule Solver.Part1 do
  def solve(text) when is_binary(text) do
    symbols = SymbolMatrix.new!(text)
    parts = EnginePartList.new!(symbols)
    solve(parts, symbols)
  end

  def solve(%EnginePartList{items: parts}, %SymbolMatrix{} = s) do
    sf = SymbolMatrix.filter_symbols(s)

    parts
    |> Enum.filter(fn part -> filter(part, sf) end)
    |> Enum.map(fn part -> part.value end)
    |> Enum.sum()
  end

  def filter(%EnginePart{} = part, %SymbolMatrix{items: symbols}) do
    symbols
    |> Enum.any?(fn x -> is_inside(part, x) end)
  end

  def is_inside(%EnginePart{} = part, %Symbol{row: row, column: col}) do
    {rowrange, colrange} = bbox(part)
    row in rowrange and col in colrange
  end

  defp bbox(%EnginePart{row: row, start_column: start_column, end_column: end_column}) do
    {(row - 1)..(row + 1), (start_column - 1)..(end_column + 1)}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Solver.Part1, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:bbox, 1}}
```

```elixir
4361 = Solver.Part1.solve(puzzle_example)
```

<!-- livebook:{"output":true} -->

```
4361
```

```elixir
Solver.Part1.solve(puzzle_input)
```

<!-- livebook:{"output":true} -->

```
528799
```

## Part 2

The engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.

You don't seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled "help", so you pick it up and the engineer answers.

Before you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You're going so slowly that you haven't even left the station. You exit the gondola.

The missing part wasn't the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.

This time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.

Consider the same engine schematic again:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.

```elixir
defmodule Solver.Part2 do
  def solve(text) when is_binary(text) do
    symbols = SymbolMatrix.new!(text)
    parts = EnginePartList.new!(symbols)
    solve(parts, symbols)
  end

  def solve(%EnginePartList{items: parts}, %SymbolMatrix{} = s) do
    gears = SymbolMatrix.filter_gears(s)

    gears.items
    |> Enum.map(fn gear -> connected_parts(gear, parts) end)
    |> Enum.filter(fn parts -> length(parts) >= 2 end)
    |> Enum.map(&sumparts/1)
    |> Enum.sum()
  end

  defp connected_parts(gear, parts) do
    parts
    |> Enum.filter(fn part -> is_inside(part, gear) end)
  end

  defp sumparts(parts) do
    parts
    |> Enum.map(fn parts -> parts.value end)
    |> Enum.product()
  end

  def is_inside(%EnginePart{} = part, %Symbol{row: row, column: col}) do
    {rowrange, colrange} = bbox(part)
    row in rowrange and col in colrange
  end

  defp bbox(%EnginePart{row: row, start_column: start_column, end_column: end_column}) do
    {(row - 1)..(row + 1), (start_column - 1)..(end_column + 1)}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Solver.Part2, <<70, 79, 82, 49, 0, 0, 16, ...>>, {:bbox, 1}}
```

```elixir
467_835 = Solver.Part2.solve(puzzle_example)
```

<!-- livebook:{"output":true} -->

```
467835
```

```elixir
Solver.Part2.solve(puzzle_input)
```

<!-- livebook:{"output":true} -->

```
84907174
```

<!-- livebook:{"offset":13728,"stamp":{"token":"XCP.uE6jovUk34Tznv_aWQnV5SNIkn7-LbSLmoSMpwzvEentlApqJ5QB1OuNUPEG_IICoQPke42rvk6iUYAOGOysXfYRBs6HEwq2UL8_hBx4qRo1JQ6pdEh7XQBh","version":2}} -->
