<!-- livebook:{"persist_outputs":true} -->

# AOC 2023 - Day 02 - Cube Conundrum?!

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"}
])
```

## Setup

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"2","session_secret":"AOC_COOKIE_2023","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_COOKIE_2023"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "Game 1: 4 red, 1 green, 15 blue; 6 green, 2 red, 10 blue; 7 blue, 6 green, 4 red; 12 blue, 10 green, 3 red\nGame 2: 3 green, 18 blue; 14 green, 4 red, 2 blue; 3 red, 14 green, 15 blue\nGame 3: 12 green, 2 blue; 9 green; 1 red, 11 blue, 4 green\nGame 4: 4 blue, 8 green, 5 red; 6 red, 7 blue, 9 green; 2 green, 2 red, 2 blue; 2 green, 6 blue, 9 red; 10 red, 9 green\nGame 5: 12 red, 1 green, 7 blue; 13 red, 16 blue; 16 blue, 10 red; 4 blue; 16 blue, 7 red; 1 blue, 7 red\nGame 6: 17 blue, 2 red; 5 blue, 6 green, 2 red; 5 green, 5 blue; 5 green, 12 blue, 4 red\nGame 7: 2 red, 1 blue, 10 green; 8 red, 14 green, 9 blue; 15 red, 1 blue, 6 green; 9 blue, 3 green, 10 red; 7 blue, 13 red, 4 green\nGame 8: 1 green, 2 blue; 7 red, 2 blue, 1 green; 1 red, 2 green; 4 red, 1 blue; 11 red, 2 green, 2 blue; 1 blue, 2 green, 11 red\nGame 9: 11 green, 11 blue, 6 red; 2 green, 3 blue, 2 red; 2 red, 11 blue, 14 green; 5 green, 7 red, 7 blue; 7 green, 1 red, 12 blue; 1 red, 8 green, 7 blue\nGame 10: 2 red, 8 green, 7 blue; 10 red, 5 green, 2 blue; 4 red, 8 green, 16 blue; 10 blue, 3 green, 15 red\nGame 11: 2 blue, 2 green, 5 red; 1 green, 3 red, 3 blue; 11 green, 1 red, 2 blue\nGame 12: 8 blue, 11 green, 14 red; 10 green, 13 red, 2 blue; 1 red, 6 green, 4 blue; 13 red, 11 green, 6 blue\nGame 13: 15 red, 17 green, 1 blue; 12 red, 1 blue, 1 green; 2 red, 1 blue, 14 green\nGame 14: 6 green, 11 red, 3 blue; 6 green, 2 blue; 2 green, 10 red, 8 blue; 2 red; 1 green, 9 red; 3 blue, 1 green, 3 red\nGame 15: 11 blue, 11 green, 4 red; 3 green, 10 blue; 2 red, 9 green, 9 blue\nGame 16: 2 blue, 11 green; 1 red, 1 blue, 11 green; 12 green, 1 blue, 1 red; 3 blue, 14 green, 1 red; 14 green, 4 blue; 2 blue, 12 green\nGame 17: 1 red, 2 blue, 4 green; 4 blue, 3 green; 1 green, 1 red, 6 blue; 1 red, 7 blue; 2 green\nGame 18: 3 red, 3 blue, 7 green; 2 blue, 2 red, 2 green; 4 red, 12 green; 5 green, 2 blue, 4 red; 3 red\nGame 19: 15 red, 7 blue, 10 green; 5 green, 8 red; 9 green, 8 red; 5 red, 10 green\nGame 20: 15 blue, 6 green, 11 red; 13 red, 9 blue, 1 green; 15 blue, 10 red, 11 green\nGame 21: 15 red, 4 green; 11 red, 2 blue, 4 green; 5 blue, 2 green, 4 red; 4 red, 5 blue; 6 red, 3 blue, 1 green\nGame 22: 4 green, 4 red, 13 blue; 3 red, 7 blue, 9 green; 12 blue, 13 green, 5 red\nGame 23: 20 green, 4 red; 6 blue, 9 red, 7 green; 6 green\nGame 24: 1 green, 3 blue, 6 red; 1 green, 1 blue, 2 red; 3 blue, 5 red, 1 green\nGame 25: 2 red, 9 blue, 2 green; 2 green, 1 red, 5 blue; 3 red, 1 green, 3 blue; 8 blue, 2 green, 3 red; 12 blue, 3 red; 1 blue, 2 green, 1 red\nGame 26: 2 blue, 5 green, 20 red; 2 blue, 6 red, 9 green; 3 red, 2 blue, 5 green\nGame 27: 17 blue, 2 red, 14 green; 15 green, 16 blue, 2 red; 13 blue, 13 green; 1 red, 7 green, 3 blue; 1 blue, 2 green\nGame 28: 5 blue, 6 red, 3 green; 7 red, 19 green; 11 blue, 13 green\nGame 29: 1 blue, 8 red, 7 green; 1 green, 1 red; 8 red, 7 green, 1 blue; 7 green, 2 red; 1 blue, 7 red; 1 blue, 2 red, 5 green\nGame 30: 3 red, 17 blue; 11 red, 3 blue, 8 green; 7 green, 12 blue, 10 red; 5 blue, 2 green\nGame 31: 14 blue, 7 green; 12 green, 14 blue, 2 red; 17 blue, 2 red, 8 green; 2 red, 3 blue, 11 green; 9 green, 4 blue; 1 red, 3 green, 1 blue\nGame 32: 15 red, 1 blue, 10 green; 15 green, 10 red, 1 blue; 2 red, 6 green, 1 blue\nGame 33: 10 green, 1 red, 16 blue; 11 blue, 14 green, 3 red; 14 green, 13 blue; 17 blue, 2 red, 3 green\nGame 34: 8 red, 7 blue, 8 green; 3 green, 1 red; 1 red, 1 green, 5 blue; 6 red, 8 green, 2 blue; 7 red, 8 blue, 3 green\nGame 35: 5 blue, 19 red; 2 blue, 11 red, 1 green; 16 red, 10 blue; 7 green, 3 blue, 6 red; 3 green, 18 red, 5 blue; 8 blue, 5 red\nGame 36: 9 red, 6 green, 10 blue; 9 red, 15 green, 6 blue; 6 red, 1 blue, 14 green\nGame 37: 7 green, 8 red, 2 blue; 3 blue, 5 red, 16 green; 1 green, 1 red, 3 blue\nGame 38: 5 green, 5 red, 3 blue; 10 blue, 19 red, 9 green; 2 red, 3 blue, 11 green\nGame 39: 15 red, 11 blue, 5 green; 11 green, 2 red, 6 blue; 2 blue, 3 green, 6 red; 15 red, 3 blue, 13 green\nGame 40: 7 green, 4 red, 1 blue; 6 blue, 6 green, 2 red; 2 blue, 3 red, 1 green; 1 blue, 3 red, 3 green; 2 red, 5 green, 3 blue\nGame" <> ...}
```

## Part 1

You're launched high into the atmosphere! The apex of your trajectory just barely reaches the surface of a large island floating in the sky. You gently land in a fluffy pile of leaves. It's quite cold, but you don't see much snow. An Elf runs over to greet you.

The Elf explains that you've arrived at Snow Island and apologizes for the lack of snow. He'll be happy to explain the situation, but it's a bit of a walk, so you have some time. They don't get many visitors up here; would you like to play a game in the meantime?

As you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.

To get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He'll do this a few times per game.

You play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ...) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).

For example, the record of a few games might look like this:

```elixir
game_example_1 = """
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""
```

<!-- livebook:{"output":true} -->

```
"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\n"
```

In game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.

The Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?

In the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.

Determine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?

```elixir
defmodule Game do
  defstruct [:game_id, :blue, :red, :green, :raw_round]

  def parse!(gamestring) do
    [raw_game_id, raw_round] = gamestring |> String.split(":")
    game_id = get_id(raw_game_id)
    rounds = parse_rounds(raw_round)
    sum_game = sum_rounds(rounds)

    %__MODULE__{
      game_id: game_id,
      raw_round: raw_round,
      red: sum_game[:red],
      green: sum_game[:green],
      blue: sum_game[:blue]
    }
  end

  def valid_game?(%__MODULE__{red: red, green: green, blue: blue}) do
    red <= 12 && green <= 13 && blue <= 14
  end

  defp get_id("Game " <> number) do
    String.to_integer(number)
  end

  defp sum_rounds(rounds) do
    rounds
    |> pivot()
    |> get_max
  end

  defp get_max(map) do
    %{
      red: Enum.max(map.red),
      green: Enum.max(map.green),
      blue: Enum.max(map.blue)
    }
  end

  defp pivot(list) do
    Enum.reduce(list, %{}, fn item, acc ->
      Enum.reduce(item, acc, fn {key, value}, inner_acc ->
        Map.update(inner_acc, key, [value], &(&1 ++ [value]))
      end)
    end)
  end

  defp parse_rounds(rounds) do
    rounds
    |> String.trim()
    |> String.split(";")
    |> Enum.map(&parse_round/1)
  end

  defp parse_round(round_string) do
    round_string
    |> String.split(",")
    |> Enum.map(&String.trim/1)
    |> Enum.map(&get_val/1)
  end

  defp get_val(val) do
    [count, marble] = val |> String.trim() |> String.split(" ")
    {String.to_atom(marble), String.to_integer(count)}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Game, <<70, 79, 82, 49, 0, 0, 21, ...>>, {:get_val, 1}}
```

```elixir
"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green"
|> Game.parse!()
|> Game.valid_game?()
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
"Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red"
|> Game.parse!()
|> Game.valid_game?()
```

<!-- livebook:{"output":true} -->

```
false
```

```elixir
defmodule GameList do
  def parse!(gamestring) do
    gamestring
    |> String.split("\n", trim: true)
    |> Enum.map(&Game.parse!/1)
  end

  def all_valids(game_list) do
    game_list |> Enum.filter(&Game.valid_game?/1)
  end

  def sum_ids(game_list) do
    Enum.reduce(game_list, 0, fn x, acc -> x.game_id + acc end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, GameList, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:sum_ids, 1}}
```

```elixir
# 12 red cubes, 13 green cubes, and 14 blue cubes = 8
8 =
  game_example_1
  |> GameList.parse!()
  |> GameList.all_valids()
  |> GameList.sum_ids()
```

<!-- livebook:{"output":true} -->

```
8
```

```elixir
# 12 red cubes, 13 green cubes, and 14 blue cubes.
puzzle_input
|> GameList.parse!()
|> GameList.all_valids()
|> GameList.sum_ids()
```

<!-- livebook:{"output":true} -->

```
2237
```

## Part 2

As you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?

Again consider the example games from earlier:

```
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
```

* In game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.
* Game 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.
* Game 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.
* Game 4 required at least 14 red, 3 green, and 15 blue cubes.
* Game 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.

The power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.

For each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?

```elixir
2286 =
  game_example_1
  |> GameList.parse!()
  |> Enum.map(fn g -> g.blue * g.red * g.green end)
  |> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
2286
```

```elixir
puzzle_input
|> GameList.parse!()
|> Enum.map(fn g -> g.blue * g.red * g.green end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
66681
```

<!-- livebook:{"offset":12305,"stamp":{"token":"XCP.CazNz0v5yzWFU2cZ-hC6DYSE4NRP_TlYhYU_OiGOBCoCP6o-AanktkCkRKfKsxe92tlhCDfxJGw427CqEbZf1v21m_EoGql3YZwMH7kvrAEIH2-0zyKNwts7","version":2}} -->
